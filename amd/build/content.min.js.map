{"version":3,"file":"content.min.js","sources":["../src/content.js"],"sourcesContent":["import $ from 'jquery';\nimport notification from 'core/notification';\nimport ajax from 'core/ajax';\n\nexport const init = () => {\n    delete_content();\n    delete_question();\n    edit_intent();\n    select_deselect_questions();\n    publish_questions();\n    delete_all_questions();\n    publish_all_documents();\n};\n\n\n/**\n * Delete a content\n */\nfunction delete_content() {\n    $(\".delete-content\").off();\n    $(\".delete-content\").on('click', function () {\n        var id = $(this).data('id');\n\n        notification.confirm('Delete',\n            'Are you sure you want to delete this content? It cannot be recovered',\n            'Delete',\n            M.util.get_string('cancel', 'local_cria'), function () {\n                //Delete the record\n                var delete_content = ajax.call([{\n                    methodname: 'cria_content_delete',\n                    args: {\n                        id: id\n                    }\n                }]);\n\n                delete_content[0].done(function ($result) {\n                    if ($result == 200) {\n                        location.reload();\n                    } else {\n                        alert($result + ' The file could not be found on the criadex server. However, the database link to the file has been deleted.');\n                        location.reload();\n                    }\n                }).fail(function () {\n                    alert('An error has occurred. The record was not deleted');\n                });\n            });\n\n    });\n}\n\n/**\n * Edit an intent\n */\nfunction edit_intent() {\n    $(\".btn-edit-intent\").off();\n    $(\".btn-edit-intent\").on('click', function () {\n        var id = $(this).data('id');\n        var bot_id = $('#bot-id').val();\n        // Hyperlink to edit_intent.php\n        window.location.href = M.cfg.wwwroot + '/local/cria/edit_intent.php?id=' + id + '&bot_id=' + bot_id;\n    });\n}\n\n/**\n * Delete quetison\n */\nfunction delete_question() {\n    $(\".delete-question\").off();\n    $(\".delete-question\").on('click', function () {\n        var id = $(this).data('id');\n        notification.confirm('Delete',\n            'Are you sure you want to delete this question? The question and all examples cannot be recovered.',\n            'Delete',\n            M.util.get_string('cancel', 'local_cria'), function () {\n                //Delete the record\n                var delete_content = ajax.call([{\n                    methodname: 'cria_question_delete',\n                    args: {\n                        id: id\n                    }\n                }]);\n\n                delete_content[0].done(function ($result) {\n                    location.reload();\n                }).fail(function () {\n                    alert('An error occured, the question could not be deleted.');\n                });\n            });\n\n    });\n}\n\nfunction select_deselect_questions() {\n    $('#select-all-questions').off();\n    $('#select-all-questions').click(function () {\n        $('input:checkbox.question-select').prop('checked', true);\n    });\n\n    $('#deselect-all-questions').click(function () {\n        $('input:checkbox.question-select').prop('checked', false);\n    });\n}\n\n/**\n * This function is responsible for publishing selected questions.\n * It first selects all HTML elements with the class 'publish-questions'.\n * It defines a function `publishQuestionsFunction` which will be triggered when a 'publish-questions' element is clicked.\n * Inside `publishQuestionsFunction`, it selects all checked checkboxes with the class 'question-select'.\n * For each of these checked checkboxes, it retrieves the 'data-id' attribute and makes an AJAX call to the 'cria_question_publish' method with the id as an argument.\n * If the AJAX call is successful and returns true, it removes the input element (checkbox) from the DOM.\n * If the AJAX call is not successful, it shows an alert message to the user with the result of the AJAX call.\n * If the AJAX call fails, it logs the error and shows an alert message to the user indicating that an error occurred and the question could not be published.\n * Finally, for each 'publish-questions' element, it sets up a click event listener that triggers the `publishQuestionsFunction`.\n */\nfunction publish_questions() {\n    // Select all HTML elements with the class 'publish-questions'\n    var publishQuestionsElements = document.querySelectorAll('.publish-questions');\n\n// Define a function that will be triggered when a 'publish-questions' element is clicked\n    var publishQuestionsFunction = function() {\n        // Select all checked checkboxes with the class 'question-select'\n        var questionSelectCheckedElements = document.querySelectorAll('input.question-select:checked');\n\n        // For each of these checked checkboxes\n        questionSelectCheckedElements.forEach(function(input) {\n            // Retrieve the 'data-id' attribute\n            var id = input.getAttribute('data-id');\nconsole.log(id);\n            // Make an AJAX call to the 'cria_question_publish' method with the id as an argument\n            var publish_questions = ajax.call([{\n                methodname: 'cria_question_publish',\n                args: {\n                    id: id\n                }\n            }]);\n\n            // If the AJAX call is successful and returns true\n            publish_questions[0].done(function ($result) {\n                console.log($result);\n                if ($result == true) {\n                    // Remove the input element (checkbox) from the DOM\n                    input.remove();\n                } else {\n                    // Show an alert message to the user with the result of the AJAX call\n                    alert($result);\n                }\n            }).fail(function (e) {\n                // Log the error and show an alert message to the user indicating that an error occurred and the question could not be published\n                console.log(e);\n                alert('An error occured, the question could not be published.');\n            });\n        });\n    };\n\n// For each 'publish-questions' element\n    publishQuestionsElements.forEach(function(element) {\n        // Remove any existing click event listener\n        element.removeEventListener('click', publishQuestionsFunction);\n\n        // Set up a click event listener that triggers the `publishQuestionsFunction`\n        element.addEventListener('click', publishQuestionsFunction);\n    });\n}\n\n/**\n * This function is responsible for deleting all questions related to a specific category.\n * It first selects all HTML elements with the class 'delete-all-questions'.\n * For each of these elements, it sets up a click event listener.\n * When an element is clicked, it retrieves the 'data-intent_id' attribute from the clicked element.\n * It then asks the user for confirmation to delete all questions for this category, warning that the questions and all examples cannot be recovered.\n * If the user confirms, it makes an AJAX call to the 'cria_question_delete_all' method with the intent_id as an argument.\n * If the AJAX call is successful and returns 200, it reloads the page.\n * If the AJAX call is not successful, it shows an alert message to the user indicating that an error occurred and the questions could not be deleted.\n * If the AJAX call fails, it also logs the error and shows an alert message to the user.\n */\nfunction delete_all_questions() {\n    var deleteAllQuestionsElement = document.querySelectorAll('.delete-all-questions');\n    var deleteAllQuestionsFunction = function() {\n        let intent_id = this.getAttribute('data-intent_id');\n        if (confirm('Are you sure you want to delete all questions for this category? The questions and all examples cannot be recovered.')) {\n            //Delete all records\n            var delete_all_questions = ajax.call([{\n                methodname: 'cria_question_delete_all',\n                args: {\n                    \"intent_id\": intent_id\n                }\n            }]);\n            delete_all_questions[0].done(function ($result) {\n                if ($result == 200) {\n                    location.reload();\n                } else {\n                    alert('An error occured, the questions could not be deleted.');\n                }\n            }).fail(function (e) {\n                console.log(e);\n                alert('An error occured, the questions could not be deleted.');\n            });\n        }\n    };\n\n    deleteAllQuestionsElement.forEach(function(element) {\n        element.removeEventListener('click', deleteAllQuestionsFunction);\n        element.addEventListener('click', deleteAllQuestionsFunction);\n    });\n}\n\n/**\n * This function is responsible for publishing all documents.\n * It first selects the necessary HTML elements by their IDs.\n * When the 'cria-publish-all-files' element is clicked, it hides the 'icon-document-publish-all' element and shows the 'icon-document-publish-all-spinner' element.\n * It then retrieves the 'data-intent_id' attribute from the clicked element and makes an AJAX call to the 'cria_content_publish_files' method with the intent_id as an argument.\n * If the AJAX call is successful, it hides the spinner and shows the publish icon again.\n * If the AJAX call fails, it also hides the spinner and shows the publish icon, but also logs the error and shows an alert message to the user.\n */\nfunction publish_all_documents() {\n    var publishAllFilesElement = document.getElementById('cria-publish-all-files');\n    var documentPublishAllElement = document.getElementById('icon-document-publish-all');\n    var documentPublishAllSpinnerElement = document.getElementById('icon-document-publish-all-spinner');\n\n\n    publishAllFilesElement.addEventListener('click', function() {\n        documentPublishAllElement.style.display = 'none';\n        documentPublishAllSpinnerElement.style.display = 'block';\n\n        var intent_id = this.getAttribute('data-intent_id');\n        var publish_files = ajax.call([{\n            methodname: 'cria_content_publish_files',\n            args: {\n                intent_id: intent_id\n            }\n        }]);\n\n        publish_files[0].done(function ($result) {\n            documentPublishAllElement.style.display = 'block';\n            documentPublishAllSpinnerElement.style.display = 'none';\n        }).fail(function (e) {\n            documentPublishAllElement.style.display = 'block';\n            documentPublishAllSpinnerElement.style.display = 'none';\n            console.log(e);\n            alert('An error occured, the question could not be published.');\n        });\n    });\n}"],"names":["publishQuestionsElements","publishQuestionsFunction","deleteAllQuestionsElement","deleteAllQuestionsFunction","publishAllFilesElement","documentPublishAllElement","documentPublishAllSpinnerElement","off","on","id","this","data","confirm","M","util","get_string","ajax","call","methodname","args","done","$result","alert","location","reload","fail","bot_id","val","window","href","cfg","wwwroot","click","prop","document","querySelectorAll","forEach","input","getAttribute","console","log","remove","e","element","removeEventListener","addEventListener","intent_id","getElementById","style","display"],"mappings":"8aAIoB,SAgHZA,yBAGAC,yBAyDAC,0BACAC,2BAsCAC,uBACAC,0BACAC,qDAtMF,mBAAmBC,0BACnB,mBAAmBC,GAAG,SAAS,eACzBC,IAAK,mBAAEC,MAAMC,KAAK,4BAETC,QAAQ,SACjB,uEACA,SACAC,EAAEC,KAAKC,WAAW,SAAU,eAAe,WAElBC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,sBACZC,KAAM,CACFV,GAAIA,OAIG,GAAGW,MAAK,SAAUC,SACd,KAAXA,SAGAC,MAAMD,QAAU,gHAFhBE,SAASC,YAKdC,MAAK,WACJH,MAAM,kFAwBpB,oBAAoBf,0BACpB,oBAAoBC,GAAG,SAAS,eAC1BC,IAAK,mBAAEC,MAAMC,KAAK,4BACTC,QAAQ,SACjB,oGACA,SACAC,EAAEC,KAAKC,WAAW,SAAU,eAAe,WAElBC,cAAKC,KAAK,CAAC,CAC5BC,WAAY,uBACZC,KAAM,CACFV,GAAIA,OAIG,GAAGW,MAAK,SAAUC,SAC7BE,SAASC,YACVC,MAAK,WACJH,MAAM,qFA/BpB,oBAAoBf,0BACpB,oBAAoBC,GAAG,SAAS,eAC1BC,IAAK,mBAAEC,MAAMC,KAAK,MAClBe,QAAS,mBAAE,WAAWC,MAE1BC,OAAOL,SAASM,KAAOhB,EAAEiB,IAAIC,QAAU,kCAAoCtB,GAAK,WAAaiB,8BAkC/F,yBAAyBnB,0BACzB,yBAAyByB,OAAM,+BAC3B,kCAAkCC,KAAK,WAAW,0BAGtD,2BAA2BD,OAAM,+BAC7B,kCAAkCC,KAAK,WAAW,MAiBpDjC,yBAA2BkC,SAASC,iBAAiB,sBAGrDlC,yBAA2B,WAESiC,SAASC,iBAAiB,iCAGhCC,SAAQ,SAASC,WAEvC5B,GAAK4B,MAAMC,aAAa,WACxCC,QAAQC,IAAI/B,IAEwBO,cAAKC,KAAK,CAAC,CAC/BC,WAAY,wBACZC,KAAM,CACFV,GAAIA,OAKM,GAAGW,MAAK,SAAUC,SAChCkB,QAAQC,IAAInB,SACG,GAAXA,QAEAgB,MAAMI,SAGNnB,MAAMD,YAEXI,MAAK,SAAUiB,GAEdH,QAAQC,IAAIE,GACZpB,MAAM,iEAMlBtB,yBAAyBoC,SAAQ,SAASO,SAEtCA,QAAQC,oBAAoB,QAAS3C,0BAGrC0C,QAAQE,iBAAiB,QAAS5C,6BAgBlCC,0BAA4BgC,SAASC,iBAAiB,yBACtDhC,2BAA6B,eACzB2C,UAAYpC,KAAK4B,aAAa,kBAC9B1B,QAAQ,yHAEmBI,cAAKC,KAAK,CAAC,CAClCC,WAAY,2BACZC,KAAM,WACW2B,cAGA,GAAG1B,MAAK,SAAUC,SACpB,KAAXA,QACAE,SAASC,SAETF,MAAM,4DAEXG,MAAK,SAAUiB,GACdH,QAAQC,IAAIE,GACZpB,MAAM,6DAKlBpB,0BAA0BkC,SAAQ,SAASO,SACvCA,QAAQC,oBAAoB,QAASzC,4BACrCwC,QAAQE,iBAAiB,QAAS1C,+BAalCC,uBAAyB8B,SAASa,eAAe,0BACjD1C,0BAA4B6B,SAASa,eAAe,6BACpDzC,iCAAmC4B,SAASa,eAAe,qCAG/D3C,uBAAuByC,iBAAiB,SAAS,WAC7CxC,0BAA0B2C,MAAMC,QAAU,OAC1C3C,iCAAiC0C,MAAMC,QAAU,YAE7CH,UAAYpC,KAAK4B,aAAa,kBACdtB,cAAKC,KAAK,CAAC,CAC3BC,WAAY,6BACZC,KAAM,CACF2B,UAAWA,cAIL,GAAG1B,MAAK,SAAUC,SAC5BhB,0BAA0B2C,MAAMC,QAAU,QAC1C3C,iCAAiC0C,MAAMC,QAAU,UAClDxB,MAAK,SAAUiB,GACdrC,0BAA0B2C,MAAMC,QAAU,QAC1C3C,iCAAiC0C,MAAMC,QAAU,OACjDV,QAAQC,IAAIE,GACZpB,MAAM"}